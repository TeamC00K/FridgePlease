{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { register } from '../lib/api/auth';\nexport const registerUser = createAsyncThunk('users/registerUser', async (_ref, thunkAPI) => {\n  let {\n    name,\n    id,\n    passwd\n  } = _ref;\n\n  try {\n    const response = await register({\n      name,\n      id,\n      passwd\n    });\n    console.log(response);\n    return response.data;\n    /*\n    const { data } = response;\n    console.log('data', data);\n    if (response.status === 200) {\n      // localStorage.setItem('token', data.token);\n      return { ...data, username: name, email };\n    }\n    return thunkAPI.rejectWithValue(data);\n    */\n  } catch (e) {\n    console.log('Error', e.response.data);\n    return thunkAPI.rejectWithValue(e.response.data);\n  }\n});\nexport const clearState = () => {};\nexport const userSlice = createSlice({\n  name: 'users',\n  initialState: {\n    name: '',\n    id: ''\n  },\n  reducers: {// Reducer comes here\n  },\n  extraReducers: builder => {\n    builder.addCase(registerUser.fulfilled, (state, action) => {\n      state.name = action.payload.name;\n      state.id = action.payload.id;\n    });\n  }\n});\nexport const userSelector = state => state.user;","map":{"version":3,"sources":["C:/ToyProjects/FridgePlease/react-app/src/modules/user.js"],"names":["createSlice","createAsyncThunk","register","registerUser","thunkAPI","name","id","passwd","response","console","log","data","e","rejectWithValue","clearState","userSlice","initialState","reducers","extraReducers","builder","addCase","fulfilled","state","action","payload","userSelector","user"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AAEA,SAASC,QAAT,QAAyB,iBAAzB;AAEA,OAAO,MAAMC,YAAY,GAAGF,gBAAgB,CAC1C,oBAD0C,EAE1C,aAA6BG,QAA7B,KAA0C;AAAA,MAAnC;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,EAAR;AAAYC,IAAAA;AAAZ,GAAmC;;AACxC,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMN,QAAQ,CAAC;AAAEG,MAAAA,IAAF;AAAQC,MAAAA,EAAR;AAAYC,MAAAA;AAAZ,KAAD,CAA/B;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACA,WAAOA,QAAQ,CAACG,IAAhB;AACA;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACK,GAbD,CAaE,OAAOC,CAAP,EAAU;AACVH,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBE,CAAC,CAACJ,QAAF,CAAWG,IAAhC;AACA,WAAOP,QAAQ,CAACS,eAAT,CAAyBD,CAAC,CAACJ,QAAF,CAAWG,IAApC,CAAP;AACD;AACF,CApByC,CAArC;AAuBP,OAAO,MAAMG,UAAU,GAAG,MAAM,CAAE,CAA3B;AAEP,OAAO,MAAMC,SAAS,GAAGf,WAAW,CAAC;AACnCK,EAAAA,IAAI,EAAE,OAD6B;AAEnCW,EAAAA,YAAY,EAAE;AACZX,IAAAA,IAAI,EAAE,EADM;AAEZC,IAAAA,EAAE,EAAE;AAFQ,GAFqB;AAMnCW,EAAAA,QAAQ,EAAE,CACR;AADQ,GANyB;AASnCC,EAAAA,aAAa,EAAEC,OAAO,IAAI;AACxBA,IAAAA,OAAO,CAACC,OAAR,CAAgBjB,YAAY,CAACkB,SAA7B,EAAwC,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACzDD,MAAAA,KAAK,CAACjB,IAAN,GAAakB,MAAM,CAACC,OAAP,CAAenB,IAA5B;AACAiB,MAAAA,KAAK,CAAChB,EAAN,GAAWiB,MAAM,CAACC,OAAP,CAAelB,EAA1B;AACD,KAHD;AAID;AAdkC,CAAD,CAA7B;AAiBP,OAAO,MAAMmB,YAAY,GAAGH,KAAK,IAAIA,KAAK,CAACI,IAApC","sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\nimport { register } from '../lib/api/auth';\n\nexport const registerUser = createAsyncThunk(\n  'users/registerUser',\n  async ({ name, id, passwd }, thunkAPI) => {\n    try {\n      const response = await register({ name, id, passwd });\n      console.log(response);\n      return response.data;\n      /*\n      const { data } = response;\n      console.log('data', data);\n      if (response.status === 200) {\n        // localStorage.setItem('token', data.token);\n        return { ...data, username: name, email };\n      }\n      return thunkAPI.rejectWithValue(data);\n      */\n    } catch (e) {\n      console.log('Error', e.response.data);\n      return thunkAPI.rejectWithValue(e.response.data);\n    }\n  },\n);\n\nexport const clearState = () => {};\n\nexport const userSlice = createSlice({\n  name: 'users',\n  initialState: {\n    name: '',\n    id: '',\n  },\n  reducers: {\n    // Reducer comes here\n  },\n  extraReducers: builder => {\n    builder.addCase(registerUser.fulfilled, (state, action) => {\n      state.name = action.payload.name;\n      state.id = action.payload.id;\n    });\n  },\n});\n\nexport const userSelector = state => state.user;\n"]},"metadata":{},"sourceType":"module"}