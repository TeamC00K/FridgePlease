{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { getItemLists } from '../lib/api/item';\nexport const initItmeLists = createAsyncThunk('items/initItmeLists', async (id, thunkAPI) => {\n  try {\n    const response = await getItemLists(id);\n    const {\n      data\n    } = response;\n\n    if (response.status === 200) {\n      return { ...data\n      };\n    }\n\n    return thunkAPI.rejectWithValue(data);\n  } catch (e) {\n    console.log('Error', e.response.data);\n    return thunkAPI.rejectWithValue(e.response.data);\n  }\n});\nexport const itemSlice = createSlice({\n  name: 'items',\n  initialState: {\n    itemList: [],\n    isFetching: false,\n    isSuccess: false,\n    isError: false,\n    errorMessage: ''\n  },\n  reducers: {// Reducer comes here\n  },\n  extraReducers: {\n    [initItmeLists.fulfilled]: (state, _ref) => {\n      let {\n        payload\n      } = _ref;\n      state.isFetching = false;\n      state.isSuccess = true;\n\n      for (const [, item] of Object.entries(payload)) {\n        const start = new Date(item.mfgDate);\n        const end = new Date(item.expDate);\n        const now = Date.now();\n        const elapsedRate = (end.getTime() - now) / (end.getTime() - start.getTime());\n        const leftDate = Math.ceil((end.getTime() - now) / (1000 * 60 * 60 * 24));\n        const consumptionRate = item.curVol / item.totalVol;\n        state.itemList.push({ ...item,\n          elapsedRate,\n          leftDate,\n          consumptionRate\n        });\n      }\n    },\n    [initItmeLists.pending]: state => {\n      state.isFetching = true;\n    },\n    [initItmeLists.rejected]: (state, _ref2) => {\n      let {\n        payload\n      } = _ref2;\n      state.isFetching = false;\n      state.isError = true;\n      state.errorMessage = payload.message;\n    }\n  }\n});\nexport const itemSelector = state => state.items;","map":{"version":3,"sources":["C:/ToyProjects/FridgePlease/react-app/src/modules/items.js"],"names":["createSlice","createAsyncThunk","getItemLists","initItmeLists","id","thunkAPI","response","data","status","rejectWithValue","e","console","log","itemSlice","name","initialState","itemList","isFetching","isSuccess","isError","errorMessage","reducers","extraReducers","fulfilled","state","payload","item","Object","entries","start","Date","mfgDate","end","expDate","now","elapsedRate","getTime","leftDate","Math","ceil","consumptionRate","curVol","totalVol","push","pending","rejected","message","itemSelector","items"],"mappings":"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","sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\nimport { getItemLists } from '../lib/api/item';\n\nexport const initItmeLists = createAsyncThunk(\n  'items/initItmeLists',\n  async (id, thunkAPI) => {\n    try {\n      const response = await getItemLists(id);\n      const { data } = response;\n      if (response.status === 200) {\n        return { ...data };\n      }\n      return thunkAPI.rejectWithValue(data);\n    } catch (e) {\n      console.log('Error', e.response.data);\n      return thunkAPI.rejectWithValue(e.response.data);\n    }\n  },\n);\n\nexport const itemSlice = createSlice({\n  name: 'items',\n  initialState: {\n    itemList: [],\n    isFetching: false,\n    isSuccess: false,\n    isError: false,\n    errorMessage: '',\n  },\n  reducers: {\n    // Reducer comes here\n  },\n  extraReducers: {\n    [initItmeLists.fulfilled]: (state, { payload }) => {\n      state.isFetching = false;\n      state.isSuccess = true;\n      for (const [, item] of Object.entries(payload)) {\n        const start = new Date(item.mfgDate);\n        const end = new Date(item.expDate);\n        const now = Date.now();\n        const elapsedRate =\n          (end.getTime() - now) / (end.getTime() - start.getTime());\n        const leftDate = Math.ceil(\n          (end.getTime() - now) / (1000 * 60 * 60 * 24),\n        );\n        const consumptionRate = item.curVol / item.totalVol;\n        state.itemList.push({\n          ...item,\n          elapsedRate,\n          leftDate,\n          consumptionRate,\n        });\n      }\n    },\n    [initItmeLists.pending]: state => {\n      state.isFetching = true;\n    },\n    [initItmeLists.rejected]: (state, { payload }) => {\n      state.isFetching = false;\n      state.isError = true;\n      state.errorMessage = payload.message;\n    },\n  },\n});\n\nexport const itemSelector = state => state.items;\n"]},"metadata":{},"sourceType":"module"}